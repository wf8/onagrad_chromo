
# uniform rate chromosome model
# using reversible jump MCMC

# set the run number
run_num = 1 

# set the number of iterations to sample from MCMC
sample_freq = 5

########## Read in data
psi <- readTrees("test.tree")[1]

# Get the chromosome counts from a tab-delimited file.
chromo_data = readCharacterDataDelimited("chromosome_counts.csv", type="NaturalNumbers", delimiter=",")

# set up an index for our MCMC moves
mi = 0



####### Chromosome Model

# We'll use exponential priors to model the rates of polyploidy and
# dysploidy events along the branches of the phylogeny

# rate of chromosome gains
lambda ~ dnExponential(10.0)

# rate of chromosome losses
delta ~ dnExponential(10.0)

# rate of polyploidization
rho ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(10.0), p=0.5)

# rate of demi-polyploidization
mu ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(10.0), p=0.5)

# linear component of rate of gain based on current number of chromosomes
lambda_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(10.0), p=0.5)

# linear component of rate of losss based on current number of chromosomes
delta_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(10.0), p=0.5)

# We need to limit the maximum number of chromosomes,
# so here we just use the largest chromosome count plus 11.
max_chromo = 43

# Create the rate matrix for chromosome number transitions.
R := fnChromosomes(max_chromo, lambda, delta, rho, mu, lambda_l, delta_l)

# We do not assume stationarity, so the root frequencies
# are set flat, except state 0 which is given a prior probability of 0.
root_frequencies := simplex(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
#root_frequencies := simplex(rep(max_chromo, 1))

# Add moves for each of the rates.
moves[mi++] = mvScale(lambda, lambda=0.1, weight=5)
moves[mi++] = mvScale(delta, lambda=0.1, weight=5)
moves[mi++] = mvScale(rho, lambda=0.1, weight=5)
moves[mi++] = mvScale(mu, lambda=0.1, weight=5)
moves[mi++] = mvScale(lambda_l, lambda=0.1, weight=5)
moves[mi++] = mvScale(delta_l, lambda=0.1, weight=5)

moves[mi++] = mvRJSwitch(rho, weight=5)
moves[mi++] = mvRJSwitch(mu, weight=5)
moves[mi++] = mvRJSwitch(lambda_l, weight=5)
moves[mi++] = mvRJSwitch(delta_l, weight=5)


# Now another stochastic node for the chromosome evolution continuous-time Markov chain (CTMC).
chromo_ctmc ~ dnPhyloCTMC(Q=R, tree=psi, rootFreq=root_frequencies, type="NaturalNumbers")

# and clamp the chromosome counts data
chromo_ctmc.clamp(chromo_data)


### set up the monitors that will output parameter values to file and screen
monitors[1] = mnFile(filename="output/uniform" + run_num + ".trees", printgen=sample_freq, psi)
monitors[2] = mnScreen(printgen=1, lambda, lambda_l, delta, delta_l, rho, mu)
monitors[3] = mnModel(filename="output/uniform" + run_num + ".log", printgen=sample_freq)
monitors[4] = mnAncestralState(filename="output/uniform-anc"+ run_num + ".log", printgen=sample_freq, tree=psi, ctmc=chromo_ctmc, type="NaturalNumbers")

### finish model
mymodel = model(chromo_ctmc)

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
#mymcmc.burnin(generations=1000, tuningInterval=10)

### run the MCMC ###
mymcmc.run(generations=10000000)

### display proposal acceptance rates and tuning ###
#mymcmc.operatorSummary()

### summarize the trees ###
#tt = readTreeTrace("output/UCLN.trees", "clock")
#tt.summarize()

### write MAP tree to file
#mapTree(tt, "output/UCLN_MAP.tre")

