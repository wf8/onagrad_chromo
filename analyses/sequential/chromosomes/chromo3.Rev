
# cladogenetic and anagenetic chromosome evolution model
# using reversible jump MCMC over both the anagenetic 
# and cladogenetic parameters

# set the run number
run_num = 3 

# set the number of iterations to sample from MCMC
sample_freq = 10

########## Read in data
psi <- readTrees("data/onagraceae_final_map.tree")[1]

# calculate tree length
t_len = 0
for (i in 1:psi.nnodes()) {
    t_len = t_len + psi.branchLength(i)
}

# Get the chromosome counts from a tab-delimited file.
chromo_data = readCharacterDataDelimited("data/chromosome_counts.csv", type="NaturalNumbers", delimiter=",")

# set up an index for our MCMC moves
mi = 0



####### Chromosome Model

# We need to limit the maximum number of chromosomes,
# so here we just use the largest chromosome count + 10.
max_chromo = 43

# we'll set the mean prior for all rates to 4 events
rate_pr <- t_len / 4

# We'll use exponential priors to model the rates of polyploidy and
# dysploidy events along the branches of the phylogeny

# rate of chromosome gains
lambda ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)

# rate of chromosome losses
delta ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)

# rate of polyploidization
rho ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)

# rate of demi-polyploidization
mu ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnExponential(rate_pr), p=0.5)

# rate modifier for gains based on current number of chromosomes
lambda_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnUniform(-3/max_chromo, 3/max_chromo)), p=0.5)

# rate modifier for losses based on current number of chromosomes
delta_l ~ dnReversibleJumpMixture(constantValue=0.0, baseDistribution=dnUniform(-3/max_chromo, 3/max_chromo)), p=0.5)


# Create the rate matrix for chromosome number transitions.
R := fnChromosomes(max_chromo, lambda, delta, rho, mu, lambda_l, delta_l)

# root frequencies are set flat, except state 0 which is given a prior probability of 0.
root_frequencies := simplex(0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
#root_frequencies := simplex(rep(max_chromo, 1))

# Add moves for each of the rates.
moves[mi++] = mvScale(lambda, lambda=1.0, weight=2)
moves[mi++] = mvScale(delta, lambda=1.0, weight=2)
moves[mi++] = mvScale(rho, lambda=1.0, weight=2)
moves[mi++] = mvScale(mu, lambda=1.0, weight=2)
moves[mi++] = mvScale(lambda_l, lambda=1.0, weight=2)
moves[mi++] = mvScale(delta_l, lambda=1.0, weight=2)

moves[mi++] = mvRJSwitch(lambda, weight=2)
moves[mi++] = mvRJSwitch(delta, weight=2)
moves[mi++] = mvRJSwitch(rho, weight=2)
moves[mi++] = mvRJSwitch(mu, weight=2)
moves[mi++] = mvRJSwitch(lambda_l, weight=2)
moves[mi++] = mvRJSwitch(delta_l, weight=2)

# cladogenetic event types
clado_no_change_pr ~ dnExponential(10.0)
clado_fission_pr ~ dnReversibleJumpMixture(constantValue=0, baseDistribution=dnExponential(10.0), p=0.5)
clado_fusion_pr ~ dnReversibleJumpMixture(constantValue=0, baseDistribution=dnExponential(10.0), p=0.5)
clado_polyploid_pr ~ dnReversibleJumpMixture(constantValue=0, baseDistribution=dnExponential(10.0), p=0.5)
clado_demipoly_pr ~ dnReversibleJumpMixture(constantValue=0, baseDistribution=dnExponential(10.0), p=0.5)

moves[mi++] = mvScale(clado_no_change_pr, lambda=1.0, weight=2)
moves[mi++] = mvScale(clado_fission_pr, lambda=1.0, weight=2)
moves[mi++] = mvScale(clado_fusion_pr, lambda=1.0, weight=2)
moves[mi++] = mvScale(clado_polyploid_pr, lambda=1.0, weight=2)
moves[mi++] = mvScale(clado_demipoly_pr, lambda=1.0, weight=2)

moves[mi++] = mvRJSwitch(clado_fission_pr, weight=2)
moves[mi++] = mvRJSwitch(clado_fusion_pr, weight=2)
moves[mi++] = mvRJSwitch(clado_polyploid_pr, weight=2)
moves[mi++] = mvRJSwitch(clado_demipoly_pr, weight=2)

clado_type := simplex([clado_no_change_pr, clado_fission_pr, clado_fusion_pr, clado_polyploid_pr, clado_demipoly_pr])
clado_prob := fnChromosomesCladoProbs(clado_type, max_chromo)

clado_no_change := clado_type[1]
clado_fission := clado_type[2]
clado_fusion := clado_type[3]
clado_polyploid := clado_type[4]
clado_demipoly := clado_type[5]

# Now another stochastic node for the chromosome evolution continuous-time Markov chain (CTMC).
chromo_ctmc ~ dnPhyloCTMCClado(tree=psi, Q=R, cladoProbs=clado_prob, rootFrequencies=root_frequencies, nSites=1, type="NaturalNumbers" )

# and clamp the chromosome counts data
chromo_ctmc.clamp(chromo_data)


### set up the monitors that will output parameter values to file and screen
monitors[1] = mnFile(filename="output/chromo" + run_num + ".trees", printgen=sample_freq, psi)
monitors[2] = mnScreen(printgen=1, lambda, lambda_l, delta, delta_l, rho, mu)
monitors[3] = mnModel(filename="output/chromo" + run_num + ".log", printgen=sample_freq)
monitors[4] = mnJointConditionalAncestralState(tree=psi, ctmc=chromo_ctmc, type="NaturalNumbers", printgen=sample_freq, withTips=true, withStartStates=true, filename="output/chromo-anc"+ run_num + ".log")

### finish model
mymodel = model(chromo_ctmc)

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### run the MCMC ###
mymcmc.run(generations=2200)


